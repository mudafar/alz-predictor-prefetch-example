{"version":3,"sources":["constants.js","predictor.js","Navbar.js","Module.js","api.js","App.js","reportWebVitals.js","index.js"],"names":["MODULES","STORAGE_KEY","PREDICT_MODULE_MAP","predictor","ALZ","storedALZ","localStorage","getItem","saveToStorage","setItem","JSON","stringify","loadJSON","add","module","get","predictions","predict","sortedPredictions","Object","keys","sort","a","b","probability","object","searchValue","entries","key","getByValue","reset","HEALTH","PERFORMANCE","USERS","LEADS","HOME","Sidebar","Navbar","bg","variant","Brand","as","Link","to","onClick","Nav","className","Button","Module","title","data","onFetch","useEffect","Jumbotron","map","item","i","getData","Promise","resolve","reject","setTimeout","Math","floor","random","length","App","useState","setData","alert","setAlert","fetchData","d","prevData","toFixed","Container","fluid","Alert","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e20cacf5.chunk.js","sourcesContent":["export const MODULES = {\n  PERFORMANCE: 'performance',\n  HEALTH: 'health',\n  USERS: 'users',\n  LEADS: 'leads',\n  HOME: 'home',\n}\n","import ALZ from 'alz-predictor'\n\nimport { MODULES } from './constants'\n\n\nexport default (function predictor() {\n  const STORAGE_KEY = 'alz-predictor'\n  const PREDICT_MODULE_MAP = {\n    [MODULES.PERFORMANCE]: 'p',\n    [MODULES.HEALTH]: 'h',\n    [MODULES.USERS]: 'u',\n    [MODULES.LEADS]: 'l',\n    [MODULES.HOME]: 'o',\n  }\n\n  function getByValue(object, searchValue) {\n    for (let [key, value] of Object.entries(object)) {\n      if (value === searchValue)\n        return key;\n    }\n  }\n\n  let predictor = new ALZ()\n\n  const storedALZ = localStorage.getItem(STORAGE_KEY)\n  if (storedALZ) {\n    predictor.loadJSON(storedALZ)\n  }\n\n\n  function saveToStorage() {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(predictor))\n  }\n\n  function addPrediction(module) {\n    predictor.add(PREDICT_MODULE_MAP[module])\n    // todo: debounce saving\n    saveToStorage()\n  }\n\n  function getPrediction() {\n    const predictions = predictor.predict()\n    const sortedPredictions = Object.keys(predictions).sort((a, b) => predictions[b] - predictions[a])\n\n    const probability = predictions[sortedPredictions[0]]\n    const module = getByValue(PREDICT_MODULE_MAP, sortedPredictions[0])\n\n    return ({\n      module,\n      probability,\n    })\n  }\n\n  function reset() {\n    predictor = new ALZ()\n    saveToStorage()\n  }\n\n  return ({\n    add: addPrediction,\n    get: getPrediction,\n    reset,\n  })\n\n})()\n\n","import { Link } from \"react-router-dom\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\n\n\nimport { MODULES } from './constants'\nimport predictor from './predictor'\n\n\n\nconst { HEALTH, PERFORMANCE, USERS, LEADS, HOME } = MODULES\n\nexport default function Sidebar() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand as={Link} to=\"/\" onClick={() => predictor.add(HOME)}>Home</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link as={Link} to=\"/users\" onClick={() => predictor.add(USERS)}>Users</Nav.Link>\n        <Nav.Link as={Link} to=\"/health\" onClick={() => predictor.add(HEALTH)}>Health</Nav.Link>\n        <Nav.Link\n          as={Link}\n          to=\"/performance\"\n          onClick={() => predictor.add(PERFORMANCE)}\n        >\n          Performance\n        </Nav.Link>\n        <Nav.Link as={Link} to=\"/leads\" onClick={() => predictor.add(LEADS)}>Leads</Nav.Link>\n      </Nav>\n      <Button variant=\"danger\" onClick={() => predictor.reset()}>Reset training</Button>\n    </Navbar>\n  )\n}","import { useEffect } from \"react\"\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\nexport default function Module({ title, data, onFetch }) {\n  useEffect(() => {\n    if (!data) {\n      onFetch(title)\n    }\n  }, [title, data, onFetch])\n\n  return (\n    <Jumbotron>\n      <h1>{title}</h1>\n      {data ? data.map((item, i) => <p key={i}>{item}</p>) : '...'}\n    </Jumbotron>\n  )\n}","const data = [\n  \"lorem\",\n  \"ipsum\",\n  \"dolor\",\n  \"sit\",\n  \"amet\",\n]\n\n\nexport const getData = () => new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\n    [...data[Math.floor(Math.random() * data.length)]]),\n    Math.random() * 10000)\n})\n","import { useEffect, useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Alert from 'react-bootstrap/Alert'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\n\n\nimport Navbar from './Navbar'\nimport Module from './Module'\nimport { getData } from './api'\nimport { MODULES } from './constants'\nimport predictor from './predictor'\n\n\nconst { HEALTH, PERFORMANCE, USERS, LEADS } = MODULES\nconst PROBABILITY_THRESHOLD = 0.7\n\nfunction App() {\n  const [data, setData] = useState({})\n  const [alert, setAlert] = useState()\n\n\n  async function fetchData(module) {\n    const d = await getData()\n    setData(prevData => ({ ...prevData, [module]: d }))\n    setAlert()\n  }\n\n  useEffect(() => {\n    const { module, probability } = predictor.get()\n    if (module) {\n      if (probability > PROBABILITY_THRESHOLD) {\n        fetchData(module)\n        setAlert(`Fetching ${module} from prediction, with probability: ${probability.toFixed(2)}`)\n      } else {\n        setAlert(`Prediction: ${module}: ${probability.toFixed(2)}`)\n      }\n    }\n  }, [])\n\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Container fluid>\n          {alert && (\n            <Alert variant='primary'>\n              {alert}\n            </Alert>\n          )}\n          <Switch>\n            <Route path=\"/performance\">\n              <Module data={data[PERFORMANCE]} onFetch={fetchData} title={PERFORMANCE} />\n            </Route>\n            <Route path=\"/users\">\n              <Module data={data[USERS]} onFetch={fetchData} title={USERS} />\n            </Route>\n            <Route path=\"/health\">\n              <Module data={data[HEALTH]} onFetch={fetchData} title={HEALTH} />\n            </Route>\n            <Route path=\"/leads\">\n              <Module data={data[LEADS]} onFetch={fetchData} title={LEADS} />\n            </Route>\n            <Route path=\"/\">\n              <Jumbotron>\n                <h1>Home</h1>\n                <p>Click on any navbar link to start training the model.</p>\n                <p>Reload the page to get the prediction.</p>\n                <p>\n                  The model will try to predict next user action.<br/>\n                  If the the prediction is greater than {PROBABILITY_THRESHOLD}, then the app will prefetch needed data.\n                </p>\n              </Jumbotron>\n            </Route>\n          </Switch>\n        </Container>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}